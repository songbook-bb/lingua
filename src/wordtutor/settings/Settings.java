package wordtutor.settings;

import java.io.File;
import java.util.Random;

import javax.swing.JOptionPane;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.bind.Unmarshaller;

import org.apache.log4j.Logger;

import wordtutor.util.DirectionMode;
import wordtutor.util.IWTSerializable;
import wordtutor.util.TranslateDirection;
import wordtutor.util.keybuttons.KeyboardButtonType;
import wordtutor.utils.Util;
import wordtutor.xml.settings.ObjectFactory;
import wordtutor.xml.settings.SettingsType;

/**
 * keeps the user settings can work with XML document
 * 
 * @author moradan
 * 
 */
public class Settings implements IWTSerializable {
  /**
	 * 
	 */
  Logger logger = Logger.getLogger(Settings.class);
  private static final long serialVersionUID = 5888329924346061697L;
  private int wordsInLesson;
  private int autoSuggest;
	private DirectionMode directionMode;
  private KeyboardButtonType keyboardType;
  private int maxScore;
  private int incScore;
  private int decScore;
  private boolean strictMode;
  private boolean examMode;
  private boolean unlearned;  
  private boolean hardest;
  private boolean random;
  
  private Random r = new Random();

  /**
   * saves the words to XML-file. Uses the classes generated by JAXB
   */
  public void saveToXML() {
    ObjectFactory factory = new ObjectFactory();
    SettingsType sTypes = factory.createSettingsType();
    sTypes.setWordsInLesson(wordsInLesson);
    sTypes.setAutoSuggest(autoSuggest);
    sTypes.setIncScore(incScore);    
    sTypes.setStrictMode(strictMode ? 1 : 0);
    sTypes.setExamMode(examMode ? 1 : 0);
    sTypes.setUnlearned(unlearned ? 1 : 0);
    sTypes.setHardest(hardest ? 1 : 0);
    sTypes.setRandom(random ? 1 : 0); 
    sTypes.setDirection(directionMode.ordinal());
    sTypes.setKeyboard(keyboardType.ordinal());
    JAXBElement<SettingsType> jaxbSettings = factory.createSettings(sTypes);
    try {
      JAXBContext jc = JAXBContext.newInstance("wordtutor.xml.settings");
      Marshaller m = jc.createMarshaller();
      m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);      
      File f = new File("settings.xml");
      m.marshal(jaxbSettings, f);
    } catch (JAXBException je) {
      String message = je.getMessage();
      JOptionPane.showMessageDialog(null, message,
          Util.getLocalizedString("ERROR.DIALOG.TITLE"),
          JOptionPane.ERROR_MESSAGE);
    }
  }

  /**
   * loads the words from XML-file. Uses the classes generated by JAXB
   */
  @SuppressWarnings("unchecked")
  public void loadFromXML() {
    JAXBElement<SettingsType> jaxbSettings = null;
    try {
      JAXBContext jc = JAXBContext.newInstance("wordtutor.xml.settings");
      Unmarshaller m = jc.createUnmarshaller();
      File f = new File("settings.xml");
      jaxbSettings = (JAXBElement<SettingsType>) m.unmarshal(f);

    } catch (JAXBException je) {
      String message = je.getMessage();
      JOptionPane.showMessageDialog(null, message,
          Util.getLocalizedString("ERROR.DIALOG.TITLE"),
          JOptionPane.ERROR_MESSAGE);
    }
    SettingsType st = jaxbSettings.getValue();
    maxScore = st.getMaxScore();
    incScore = st.getIncScore();
    decScore = st.getDecScore();
    wordsInLesson = st.getWordsInLesson();
    autoSuggest = st.getAutoSuggest();
    int dMode = st.getDirection();
    switch (dMode) {
      case 0:
        directionMode = DirectionMode.STRAIGHT;
        break;
      case 1:
        directionMode = DirectionMode.REVERSE;
        break;
      case 2:
        directionMode = DirectionMode.BOTH;
        break;
      default:
        break;
    }
    int kType = st.getKeyboard();
    
    keyboardType = keyboardIntToEnumeration(kType);    

    if (st.getExamMode() == 1) {
      setExamMode(true);
    } else {
      setExamMode(false);
    }
    if (st.getStrictMode() == 1) {
      setStrictMode(true);
    } else {
      setStrictMode(false);
    }
    if (st.getUnlearned() == 1) {
      setUnlearned(true);
    } else {
      setUnlearned(false);
    }    
    if (st.getHardest() == 1) {
      setHardest(true);
    } else {
      setHardest(false);
    }    
    if (st.getRandom() == 1) {
        setRandom(true);
    } else {
        setRandom(false);
    }    
  }

	public KeyboardButtonType keyboardIntToEnumeration(int keyboardInt) {
		switch (keyboardInt) {
		case 0:
			return KeyboardButtonType.SPANISH;
		case 1:
			return KeyboardButtonType.GERMAN;
		case 2:
			return KeyboardButtonType.KASHUBIAN;
		case 3:
			return KeyboardButtonType.POLISH;
		case 4:
			return KeyboardButtonType.ITALIAN;
		case 5:
			return KeyboardButtonType.FRENCH;
		case 6:
			return KeyboardButtonType.CROATIAN;
			// ADD NEW KEYBOARD HERE	
		}
		return KeyboardButtonType.SPANISH;
	}

	public int keyboardEnumerationToInt(KeyboardButtonType keyboardEnumeration) {		
		if (keyboardEnumeration == KeyboardButtonType.SPANISH) return 0;
		if (keyboardEnumeration == KeyboardButtonType.GERMAN) return 1;
		if (keyboardEnumeration == KeyboardButtonType.KASHUBIAN) return 2;
		if (keyboardEnumeration == KeyboardButtonType.POLISH) return 3;
		if (keyboardEnumeration == KeyboardButtonType.ITALIAN) return 4;
		if (keyboardEnumeration == KeyboardButtonType.FRENCH) return 5;
		if (keyboardEnumeration == KeyboardButtonType.CROATIAN) return 6;
		// ADD NEW KEYBOARD HERE
		return 0;
	}	
  
  public void setWordsInLesson(int wordsInLesson) {
    this.wordsInLesson = wordsInLesson;
  }

  public int getWordsInLesson() {
    return wordsInLesson;
  }

  public void setDirectionMode(DirectionMode directionMode) {
    this.directionMode = directionMode;
  }

  public DirectionMode getDirectionMode() {
    return directionMode;
  }

  public KeyboardButtonType getKeyboardType() {
    return keyboardType;
  }

  public void setKeyboardType(KeyboardButtonType keyboardType) {
    this.keyboardType = keyboardType;
  }

  public void setMaxScore(int maxScore) {
    this.maxScore = maxScore;
  }

  public int getMaxScore() {
    return this.maxScore;
  }

  public void setIncScore(int incScore) {
    this.incScore = incScore;
  }

  public int getIncScore() {
    return this.incScore;
  }

  public void setDecScore(int decScore) {
    this.decScore = decScore;
  }

  public int getDecScore() {
    return this.decScore;
  }

  public void setStrictMode(boolean strictMode) {
    this.strictMode = strictMode;
  }

  public boolean isStrictMode() {
    return this.strictMode;
  }

  /**
   * gets the next current translation direction. depends on the direction mode
   */
  public TranslateDirection getNextDirection() {
    TranslateDirection result = TranslateDirection.STRAIGHT;
    switch (directionMode) {
      case STRAIGHT:
        result = TranslateDirection.STRAIGHT;
        break;
      case REVERSE:
        result = TranslateDirection.REVERSE;
        break;
      case BOTH: {
        if (r.nextBoolean())
          result = TranslateDirection.STRAIGHT;
        else
          result = TranslateDirection.REVERSE;
      }
    }
    return result;
  }

  public void setExamMode(boolean examMode) {
    this.examMode = examMode;
  }

  public boolean isExamMode() {
    return this.examMode;
  }
  
  public void setUnlearned(boolean unlearned) {
    this.unlearned = unlearned;
  }

  public boolean isUnlearned() {
    return this.unlearned;
  }

  public boolean isHardest() {
		return hardest;
  }

  public void setHardest(boolean hardest) {
	  this.hardest = hardest;
  }

  public boolean isRandom() {
		return random;
  }

  public void setRandom(boolean random) {
	  this.random = random;
  }

  public int getAutoSuggest() {
	  return autoSuggest;
  }

  public void setAutoSuggest(int autoSuggest) {
	  this.autoSuggest = autoSuggest;
  }
  
}
